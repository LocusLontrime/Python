# accepted on codewars.com
import time

memo_table: dict[tuple[int, int, int], tuple[int, int]] = {}
max_shift: int


def jump_to_zero(arr: list[int]):
    global max_shift
    max_shift = 0
    res = []
    print(f'arr: {arr}')
    for number in arr:
        n_, add = standardize(number)
        digits = get_digs_str(n_)
        length = len(digits)
        print(f'standardized num: {n_}, add: {add}')
        print(f'digits: {digits}')
        print(f'length: {length}')
        r = rec_seeker(length, 0, 0, True, digits, n_, length)
        print(f'interim_res: {r[0]}, final shift: {r[1]}')
        res.append(r[0] + add)
    return res


def standardize(num: int) -> tuple[int, int]:
    return num - (sum_ if (b := (sum_ := sum_digs(num)) % 9 != 0) else 0), 1 if b else 0


def rec_seeker(i: int, sum_: int, shift_: int, restr: bool, digits: list[int], num: int, length: int) -> tuple[int, int]:
    # TODO: fix the flagging, try to avoid it if possible.
    global max_shift
    if (i, sum_, shift_) not in memo_table.keys():
        max_shift = min(max_shift, shift_)
        # border case:
        digs_rem = i
        # print(f'{i = }, {sum_ = }, {shift_ = }, {restr = }, {digs_rem = }')
        if digs_rem <= 3:
            if restr:
                in_num = num % (10 ** digs_rem)
            else:
                in_num = 10 ** digs_rem + shift_
            r = i_am_brut_cycle(sum_, in_num)
            # print(f'i_am_brut({sum_, in_num}) -> {memo_table[(i, sum_, shift_)]}')
            if not restr:
                memo_table[(i, sum_, shift_)] = r
            return r
        # body of rec:
        res, interim_res = 0, 0  # ??
        next_shift = shift_
        max_dig = digits[length - i] if restr else 9
        for d_ in range(max_dig, -1, -1):  # from 9 to zero
            # recurrent relation
            interim_res, next_shift = rec_seeker(i - 1, sum_ + d_, next_shift, restr and d_ == max_dig, digits, num, length)
            res += interim_res
        # returning value:
        r = res, next_shift
        if not restr:
            memo_table[(i, sum_, shift_)] = r
        return r
    return memo_table[(i, sum_, shift_)]


def i_am_brut_cycle(sum_: int, num: int) -> tuple[int, int]:
    steps = 0
    while num >= 0 and (num != 0 or sum_ != 0):
        num, steps = num - sum_ - sum_digs(num), steps + 1
    return steps, num


def sum_digs(n: int) -> int:
    return sum(map(int, str(n)))


def get_digs_str(n: int):
    return [int(d) for d in str(n)]


# n_ = 197
# print(f'digs: {get_digs(n_), get_digs_str(n_)}')
#
# start = time.time_ns()
# for n_ in range(1, 1_000_000):
#     get_digs(n_)
# finish = time.time_ns()
# print(f'time elapsed math: {(finish - start) // 10 ** 6} milliseconds')
#
# start = time.time_ns()
# for n_ in range(1, 1_000_000):
#     get_digs_str(n_)
# finish = time.time_ns()
# print(f'time elapsed str: {(finish - start) // 10 ** 6} milliseconds')

# pars = 1, 963
# print(f'steps: {i_am_brut(*pars)}')
# print(f'steps: {i_am_brut(*pars)}')

arrays = [[13600, 40579, 32788, 3703, 42861, 40146, 98560, 70278, 22924, 85789, 81026, 45370, 69938, 44704, 53983, 63645, 78020, 83876, 59333, 70815, 22781, 12022, 69829, 10070, 52926, 41338, 80185, 17377, 3985, 9475, 22197, 15020, 67433, 39231, 95210, 382, 71219, 27114, 18128, 21527, 5509, 59597, 19415, 17592, 4340, 48516, 46082, 84589, 53443, 70364, 55123, 30257, 76445, 75374, 14276, 8399, 80443, 95235, 4867, 8297, 23542, 39909, 852, 73253, 83871, 53448, 17808, 36036, 67684, 57557, 40607, 7307, 61881, 1872, 3092, 71159, 99705, 31323, 44593, 64180, 3791, 63679, 38691, 95858, 91709, 14467, 3998, 3688, 57577, 85925, 78864, 94756, 14676, 42975, 86677, 28886, 69380, 5340, 8303, 65927, 24525, 22265, 89562, 63323, 6091, 85748, 30769, 26773, 6138, 23399, 69479, 2803, 42327, 48530, 44599, 45759, 9612, 52906, 90794, 98495, 35505, 82923, 65766, 65439, 59241, 36627, 6532, 99161, 22005, 46654, 61703, 19867, 95489, 44449, 87839, 71581, 78402, 22612, 43651, 56723, 25788, 37966, 3415, 81551, 85301, 15942, 21237, 64625, 89923, 39918, 97804, 20139, 94948, 70595, 81202, 68320, 43419, 14647, 55440, 11213, 30800, 86800, 78125, 33019, 56613, 80862, 24963, 57666, 46558, 55522, 33297, 26867, 35476, 18155, 79309, 48201, 86127, 924, 35040, 23355, 35194, 56061, 87990, 18047, 96059, 91471, 31634, 91670, 72710, 26458, 30423, 12322, 15531, 24730, 99, 25297, 37418, 25798, 58756, 26943, 11420, 12131, 55046, 47314, 55574, 57786, 42448, 97038, 85856, 40115, 77634, 47718, 32551, 57142, 95245, 73543, 34826, 57475, 81637, 4594, 17654, 46053, 47696, 7359, 86239, 32635, 12903, 66804, 71668, 14223, 56604, 2486, 96467, 69780, 33547, 39038, 66277, 27598, 71842, 22677, 9575, 5601, 3173, 67623, 1613, 84778, 37567, 64527, 58910, 11396, 49417, 3851, 26476, 7335, 59573, 69805, 95437, 17849, 43284, 75446, 88933, 3778, 44690, 40693, 91880, 93153, 43605, 46052, 10845, 21732, 11906, 85057, 90464, 4003, 42123, 61842, 31819, 41805, 98409, 66763, 69207, 16829, 46692, 19894, 63845, 97634, 82097, 4507, 17762, 4641, 3333, 20534, 37410, 72323, 51208, 32537, 22295, 65233, 99888, 53085, 95012, 80896, 12649, 28073, 97578, 26551, 71207, 84928, 74850, 19976, 71229, 94278, 14941, 86034, 81675, 79381, 24790, 77797, 84853, 7886, 61273, 90465, 44642, 99608, 37503, 33065, 5118, 33712, 32500, 69338, 78651, 98803, 91608, 47300, 82628, 70915, 80928, 63332, 19635, 58229, 64326, 73291, 46190, 52293, 70921, 27923, 54549, 51587, 96756, 43995, 92463, 19678, 78047, 88727, 75351, 13485, 69173, 40927, 89984, 86695, 74253, 39534, 5764, 77013, 4561, 20779, 22846, 56883, 55326, 82314, 85118, 46963, 938, 11125, 88052, 48585, 603, 18184, 9798, 36381, 82689, 65912, 90970, 39596, 26263, 69312, 72483, 32321, 20546, 74627, 86964, 88788, 38373, 68693, 24263, 8461, 55131, 98053, 48397, 42853, 9778, 21398, 32635, 91378, 12783, 12348, 42411, 98534, 94796, 7247, 571, 7262, 65238, 68030, 75720, 68127, 32685, 67444, 24106, 96032, 36103, 65679, 35677, 94478, 20487, 75361, 63778, 92351, 76153, 18559, 85254, 66459, 87127, 42990, 45103, 47006, 27000, 99097, 37706, 72161, 8009, 40707, 17149, 25360, 82213, 33675, 44297, 98130, 59106, 28005, 43111, 44842, 17187, 42324, 90091, 78581, 19829, 46558, 93582, 11357, 8521, 72842, 14924, 89331, 98724, 77793, 36945, 36017, 72298, 33959, 72744, 89144, 52588, 67235, 14436, 39186, 34303, 87960, 54474, 12273, 22381, 16596, 52254, 61507, 91772, 61617, 39666, 78027, 61524, 23045, 52860, 39891, 97147, 26644, 99541, 41410, 92692, 53527, 6083, 38481, 46752, 99259, 38799, 80882, 77042, 6087, 39871, 84407, 98601, 52790, 10680, 95035, 9443, 63787, 53075, 68064, 45029, 49246, 49871, 57530, 69487, 86810, 36836, 98549, 35215, 1909, 88045, 96493, 56385, 49323, 38199, 94693, 12449, 55710, 8686, 18929, 31607, 79290, 85559, 80622, 64145, 38339, 95017, 2304, 26313, 95213, 29530, 51959, 40384, 46761, 96406, 17216, 53623, 65920, 40034, 42048, 24642, 54946, 70611, 41064, 75240, 49629, 86994, 59334, 41255, 41279, 97270, 28874, 81859, 75703, 71118, 75765, 51632, 15330, 3090, 62682, 47029, 55673, 23902, 5021, 19386, 39276, 92896, 14115, 20223, 78079, 49584, 98568, 74413, 16664, 59073, 30542, 77744, 56552, 48021, 74386, 55098, 76952, 72687, 97052, 61820, 75266, 59588, 39409, 53707, 34428, 93733, 47277, 44679, 40993, 14334, 84193, 65933, 85459, 35305, 2927, 55209, 74879, 70706, 71708, 92504, 74796, 53590, 42631, 49961, 49654, 7709, 70262, 77371, 59945, 99323, 40179, 24524, 76217, 28036, 64866, 91553, 70640, 37348, 7789, 64032, 50969, 38289, 10758, 66278, 30613, 84207, 12316, 14844, 16020, 60433, 17505, 73896, 90232, 5659, 3883, 21936, 67392, 64379, 85701, 37733, 15441, 40737, 14775, 74885, 13970, 71484, 50798, 16220, 35199, 63427, 87579, 59399, 88438, 33000, 83465, 94742, 49688, 52462, 17205, 41341, 96979, 25969, 92424, 16599, 78574, 77406, 99239, 26211, 28855, 39656, 7070, 58054, 65390, 87841, 22085, 69658, 1107, 62781, 33359, 1394, 12437, 2329, 9343, 8002, 28124, 74407, 51873, 23618, 87959, 51273, 68155, 79543, 64735, 78776, 89951, 90194, 62870, 10576, 58876, 3948, 56965, 33552, 95010, 18288, 78367, 90773, 88858, 90977, 9223, 33947, 44255, 12057, 89917, 54052, 20829, 63674, 76683, 54648, 23012, 30273, 60962, 29022, 99871, 10975, 33876, 68600, 22248, 99974, 42585, 89449, 9039, 90408, 69182, 17091, 80542, 98059, 98028, 43274, 14148, 93418, 80068, 6909, 96143, 76347, 56128, 67610, 57390, 34623, 8157, 50153, 41423, 75384, 74570, 55912, 74298, 92311, 81238, 23232, 56665, 62326, 42206, 51807, 16051, 30600, 53710, 36222, 96281, 90944, 91120, 5015, 56122, 20428, 27090, 92179, 10156, 9197, 58670, 70844, 20575, 50307, 26734, 9209, 37527, 38070, 70570, 14616, 82531, 67237, 1792, 84954, 87033, 978, 80777, 7048, 15209, 4831, 13784, 21293, 47176, 32969, 45748, 98287, 6415]]
start = time.time_ns()
for arr_ in arrays:
    print(f'STEPS: {jump_to_zero(arr_)}')  # 10 ** x for x in range(18 + 1)
finish = time.time_ns()
print(f'time elapsed str: {(finish - start) // 10 ** 6} milliseconds')
# print(f'MEMO TABLE: ')
# for key in sorted(memo_table.keys(), key=lambda k: (-k[0], -k[1], -k[2])):
#     print(f'{key}: {memo_table[key]}')
print(f'SIZE: {len(memo_table)}')
print(f'max shift: {-max_shift}')


# RES: [1, 2, 11, 81, 611, 4798, 39320, 333583, 2897573, 25632474]

# steps per 100k -->> [4798, 9350, 13681, 17811, 21760, 25544, 29179, 32680, 36057, 39320]


