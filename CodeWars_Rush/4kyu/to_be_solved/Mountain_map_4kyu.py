def to_mountain(mat: list[list[int]]):

    wrong_numbers_coordinates = []

    def find_max():

        max_val = 0
        max_coordinates = (0, 0)

        for i in range(len(mat)):
            for j in range(len(mat[0])):

                if max_val < mat[i][j]:

                    max_val = mat[i][j]
                    max_coordinates = (i, j)

        return max_coordinates

    def is_valid(j: int, i: int) -> bool:
        return 0 <= j < len(mat) and 0 <= i < len(mat[0])

    def first_wave_spreading(coordinates: tuple, flag=True):

        max_value = mat[coordinates[0]][coordinates[1]]

        m = max(coordinates[0], coordinates[1], len(mat) - 1 - coordinates[0], len(mat[0]) - 1 - coordinates[1])

        for k in range(1, m + 1):

            for i in range(coordinates[1] - k, coordinates[1] + k + 1):

                if is_valid(coordinates[0] - k, i):
                    if mat[coordinates[0] - k][i] <= max_value - k:
                        mat[coordinates[0] - k][i] = max_value - k
                    else:
                        wrong_numbers_coordinates.append((coordinates[0] - k, i))

                if is_valid(coordinates[0] + k, i):
                    if mat[coordinates[0] + k][i] <= max_value - k:
                        mat[coordinates[0] + k][i] = max_value - k
                    else:
                        wrong_numbers_coordinates.append((coordinates[0] + k, i))

            for j in range(coordinates[0] - k + 1, coordinates[0] + k):

                if is_valid(j, coordinates[1] - k):
                    if mat[j][coordinates[1] - k] <= max_value - k:
                        mat[j][coordinates[1] - k] = max_value - k
                    else:
                        wrong_numbers_coordinates.append((j, coordinates[1] - k))

                if is_valid(j, coordinates[1] + k):
                    if mat[j][coordinates[1] + k] <= max_value - k:
                        mat[j][coordinates[1] + k] = max_value - k
                    else:
                        wrong_numbers_coordinates.append((j, coordinates[1] + k))

    first_wave_spreading(find_max())

    print_array(mat)

    print(f'wrong ones: {wrong_numbers_coordinates}')

    # sort

    # for element in wrong_numbers_coordinates:
    #
    #     first_wave_spreading(element)
    #
    # print_array(mat)


def print_array(array: list[list[int]]) -> None:
    for string in array:
        print(string)


arr = [
    [12, 10, 8, 12, 5],
    [11, 10, 1, 3, 5],
    [0, 1, 1, 5, 7],
    [7, 7, 6, 4, 3],
    [11, 5, 6, 8, 9]
]

to_mountain(arr)

































# initial_arr = [[65, 63, 65, 61, 64, 63, 58, 57, 59, 59, 57, 55, 56, 53, 50, 53, 51, 50, 47, 49, 44, 44, 45, 45, 43, 39, 38, 40, 36, 36, 37], [66, 65, 64, 61, 61, 60, 59, 60, 56, 57, 55, 54, 53, 52, 53, 50, 49, 46, 47, 46, 46, 43, 43, 44, 39, 39, 37, 37, 38, 37, 36], [62, 65, 60, 63, 59, 61, 56, 59, 57, 54, 52, 53, 51, 53, 50, 51, 48, 46, 46, 45, 44, 45, 44, 41, 41, 40, 40, 36, 35, 37, 35], [65, 64, 62, 62, 60, 59, 58, 55, 57, 53, 54, 52, 50, 50, 50, 48, 49, 44, 44, 42, 42, 43, 41, 38, 37, 39, 36, 35, 33, 35, 32], [63, 63, 59, 59, 56, 58, 58, 57, 53, 51, 54, 53, 49, 47, 46, 48, 45, 43, 46, 44, 43, 39, 41, 37, 39, 36, 36, 37, 33, 35, 31], [61, 60, 59, 58, 57, 56, 54, 54, 54, 53, 52, 52, 50, 50, 49, 47, 45, 43, 43, 42, 42, 42, 38, 40, 37, 38, 34, 35, 34, 33, 30], [60, 58, 60, 56, 57, 57, 52, 54, 51, 52, 49, 49, 49, 47, 45, 47, 44, 41, 44, 43, 41, 40, 39, 36, 37, 34, 34, 34, 34, 32, 30], [58, 59, 58, 57, 53, 56, 51, 54, 50, 52, 49, 46, 48, 45, 43, 44, 43, 44, 39, 38, 40, 40, 36, 34, 33, 36, 34, 31, 30, 31, 29], [59, 55, 57, 56, 54, 53, 50, 50, 51, 50, 46, 46, 48, 45, 45, 43, 43, 39, 40, 40, 36, 36, 35, 33, 34, 34, 34, 32, 32, 28, 27], [59, 58, 55, 55, 51, 51, 49, 48, 50, 48, 46, 45, 46, 43, 43, 43, 40, 39, 38, 40, 35, 34, 35, 34, 34, 34, 32, 29, 27, 27, 29], [58, 53, 54, 51, 53, 53, 48, 49, 47, 49, 48, 43, 45, 42, 41, 42, 42, 39, 38, 37, 38, 35, 36, 35, 31, 33, 31, 27, 30, 27, 26], [56, 52, 53, 53, 52, 49, 50, 47, 47, 48, 47, 44, 43, 43, 39, 41, 39, 38, 39, 38, 37, 36, 33, 30, 32, 28, 30, 28, 28, 26, 25], [53, 55, 50, 53, 49, 51, 49, 47, 48, 45, 42, 41, 42, 41, 40, 40, 36, 35, 36, 34, 35, 34, 32, 32, 28, 29, 28, 29, 27, 23, 25], [51, 50, 53, 52, 47, 50, 45, 44, 43, 45, 44, 42, 41, 40, 40, 40, 36, 34, 37, 34, 32, 31, 31, 31, 27, 29, 29, 28, 24, 24, 24], [52, 50, 51, 48, 48, 48, 47, 45, 44, 43, 44, 40, 41, 39, 40, 38, 35, 34, 36, 31, 33, 32, 28, 30, 29, 27, 28, 25, 22, 23, 23], [49, 51, 51, 48, 49, 48, 44, 46, 42, 40, 43, 42, 38, 40, 35, 35, 34, 35, 34, 34, 29, 28, 28, 29, 27, 25, 23, 23, 21, 23, 19], [48, 48, 48, 49, 44, 46, 42, 41, 42, 40, 39, 41, 40, 37, 38, 36, 34, 32, 34, 31, 29, 29, 29, 28, 24, 26, 25, 24, 23, 21, 21], [51, 48, 46, 44, 44, 46, 41, 44, 42, 42, 37, 40, 35, 34, 35, 33, 32, 31, 30, 29, 31, 29, 29, 26, 24, 24, 24, 24, 22, 19, 21], [50, 47, 44, 46, 45, 43, 41, 42, 42, 41, 38, 35, 36, 36, 36, 35, 31, 32, 28, 31, 27, 27, 27, 25, 25, 23, 23, 22, 22, 20, 19], [46, 47, 47, 44, 43, 42, 40, 38, 41, 38, 35, 37, 37, 35, 34, 31, 33, 29, 31, 26, 26, 25, 24, 25, 23, 23, 22, 21, 17, 18, 15], [48, 46, 45, 41, 44, 43, 42, 41, 39, 36, 34, 34, 34, 33, 33, 33, 32, 28, 29, 25, 28, 23, 26, 22, 20, 20, 18, 21, 17, 18, 18], [45, 42, 41, 42, 40, 41, 41, 38, 35, 36, 33, 35, 34, 32, 33, 31, 27, 28, 28, 25, 27, 26, 22, 20, 22, 20, 21, 20, 15, 18, 17], [45, 41, 44, 43, 41, 39, 40, 35, 34, 34, 35, 34, 32, 33, 30, 27, 26, 26, 27, 25, 22, 25, 20, 22, 21, 21, 16, 18, 18, 13, 16], [43, 40, 43, 39, 38, 39, 39, 34, 33, 35, 31, 33, 31, 30, 31, 26, 29, 28, 27, 22, 24, 21, 23, 19, 19, 20, 19, 18, 15, 13, 12], [42, 43, 41, 41, 37, 36, 38, 37, 33, 35, 34, 31, 28, 27, 30, 27, 27, 24, 23, 23, 21, 23, 19, 17, 16, 19, 14, 16, 16, 14, 13], [39, 42, 39, 37, 36, 37, 33, 33, 32, 31, 29, 30, 29, 26, 27, 28, 25, 23, 25, 23, 20, 18, 21, 19, 17, 17, 14, 16, 14, 13, 13], [42, 41, 40, 37, 35, 37, 34, 35, 32, 30, 29, 29, 30, 25, 28, 23, 26, 21, 21, 20, 19, 18, 17, 17, 14, 15, 15, 14, 11, 13, 9], [38, 36, 37, 34, 36, 34, 34, 32, 32, 30, 30, 29, 29, 26, 25, 26, 25, 23, 23, 20, 19, 19, 16, 15, 14, 13, 12, 14, 9, 10, 7], [36, 37, 37, 37, 34, 34, 31, 33, 29, 29, 27, 27, 25, 26, 23, 22, 24, 22, 22, 17, 19, 18, 16, 13, 16, 11, 12, 11, 9, 9, 8], [35, 37, 35, 33, 33, 32, 30, 29, 28, 26, 27, 26, 27, 24, 25, 21, 21, 21, 21, 19, 18, 16, 16, 16, 12, 13, 12, 8, 9, 8, 7], [37, 34, 34, 32, 33, 29, 31, 30, 30, 25, 28, 24, 23, 22, 21, 20, 18, 18, 18, 15, 15, 14, 16, 14, 13, 9, 9, 8, 8, 7, 7], [34, 36, 35, 30, 29, 31, 28, 30, 27, 27, 25, 25, 21, 22, 23, 22, 17, 19, 15, 14, 13, 14, 12, 12, 12, 12, 11, 10, 5, 4, 4], [34, 32, 32, 31, 30, 31, 29, 29, 28, 26, 26, 22, 22, 19, 21, 19, 19, 18, 18, 15, 16, 11, 11, 10, 11, 9, 10, 8, 7, 3, 3], [34, 34, 29, 28, 31, 30, 28, 24, 26, 26, 25, 24, 21, 21, 20, 20, 19, 17, 16, 12, 14, 11, 13, 9, 10, 7, 6, 8, 7, 4, 4], [30, 29, 28, 29, 27, 28, 26, 23, 26, 21, 22, 22, 18, 18, 16, 16, 16, 14, 15, 11, 14, 12, 11, 10, 6, 5, 4, 7, 2, 2, 0]]
# arr = [[65, 65, 65, 64, 64, 63, 62, 61, 60, 59, 58, 57, 56, 55, 54, 53, 52, 51, 50, 49, 48, 47, 46, 45, 44, 43, 42, 41, 40, 39, 38], [66, 65, 64, 64, 63, 63, 62, 61, 60, 59, 58, 57, 56, 55, 54, 53, 52, 51, 50, 49, 48, 47, 46, 45, 44, 43, 42, 41, 40, 39, 38], [65, 65, 64, 63, 63, 62, 62, 61, 60, 59, 58, 57, 56, 55, 54, 53, 52, 51, 50, 49, 48, 47, 46, 45, 44, 43, 42, 41, 40, 39, 38], [65, 64, 64, 63, 62, 62, 61, 61, 60, 59, 58, 57, 56, 55, 54, 53, 52, 51, 50, 49, 48, 47, 46, 45, 44, 43, 42, 41, 40, 39, 38], [64, 64, 63, 63, 62, 61, 61, 60, 60, 59, 58, 57, 56, 55, 54, 53, 52, 51, 50, 49, 48, 47, 46, 45, 44, 43, 42, 41, 40, 39, 38], [63, 63, 63, 62, 62, 61, 60, 60, 59, 59, 58, 57, 56, 55, 54, 53, 52, 51, 50, 49, 48, 47, 46, 45, 44, 43, 42, 41, 40, 39, 38], [62, 62, 62, 62, 61, 61, 60, 59, 59, 58, 58, 57, 56, 55, 54, 53, 52, 51, 50, 49, 48, 47, 46, 45, 44, 43, 42, 41, 40, 39, 38], [61, 61, 61, 61, 61, 60, 60, 59, 58, 58, 57, 57, 56, 55, 54, 53, 52, 51, 50, 49, 48, 47, 46, 45, 44, 43, 42, 41, 40, 39, 38], [60, 60, 60, 60, 60, 60, 59, 59, 58, 57, 57, 56, 56, 55, 54, 53, 52, 51, 50, 49, 48, 47, 46, 45, 44, 43, 42, 41, 40, 39, 38], [59, 59, 59, 59, 59, 59, 59, 58, 58, 57, 56, 56, 55, 55, 54, 53, 52, 51, 50, 49, 48, 47, 46, 45, 44, 43, 42, 41, 40, 39, 38], [58, 58, 58, 58, 58, 58, 58, 58, 57, 57, 56, 55, 55, 54, 54, 53, 52, 51, 50, 49, 48, 47, 46, 45, 44, 43, 42, 41, 40, 39, 38], [57, 57, 57, 57, 57, 57, 57, 57, 57, 56, 56, 55, 54, 54, 53, 53, 52, 51, 50, 49, 48, 47, 46, 45, 44, 43, 42, 41, 40, 39, 38], [56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 55, 55, 54, 53, 53, 52, 52, 51, 50, 49, 48, 47, 46, 45, 44, 43, 42, 41, 40, 39, 38], [55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 54, 54, 53, 52, 52, 51, 51, 50, 49, 48, 47, 46, 45, 44, 43, 42, 41, 40, 39, 38], [54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 53, 53, 52, 51, 51, 50, 50, 49, 48, 47, 46, 45, 44, 43, 42, 41, 40, 39, 38], [53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 52, 52, 51, 50, 50, 49, 49, 48, 47, 46, 45, 44, 43, 42, 41, 40, 39, 38], [52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 51, 51, 50, 49, 49, 48, 48, 47, 46, 45, 44, 43, 42, 41, 40, 39, 38], [51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 50, 50, 49, 48, 48, 47, 47, 46, 45, 44, 43, 42, 41, 40, 39, 38], [50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 49, 49, 48, 47, 47, 46, 46, 45, 44, 43, 42, 41, 40, 39, 38], [49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 48, 48, 47, 46, 46, 45, 45, 44, 43, 42, 41, 40, 39, 38], [48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 47, 47, 46, 45, 45, 44, 44, 43, 42, 41, 40, 39, 38], [47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 46, 46, 45, 44, 44, 43, 43, 42, 41, 40, 39, 38], [46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 45, 45, 44, 43, 43, 42, 42, 41, 40, 39, 38], [45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 44, 44, 43, 42, 42, 41, 41, 40, 39, 38], [44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 43, 43, 42, 41, 41, 40, 40, 39, 38], [43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 42, 42, 41, 40, 40, 39, 39, 38], [42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 41, 41, 40, 39, 39, 38, 38], [41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 40, 40, 39, 38, 38, 37], [40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 39, 39, 38, 37, 37], [39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 38, 38, 37, 36], [38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 37, 37, 36], [37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 36, 36], [36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 35], [35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35], [34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34]]
#
#
# print_array(initial_arr)
# print_array(arr)
