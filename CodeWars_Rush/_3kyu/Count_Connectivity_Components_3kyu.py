# accepted on codewars.com
from collections import defaultdict as d
import sys

sys.setrecursionlimit(1_000_000)


DIRS = ((0, 1), (1, 0), (0, -1), (-1, 0))
EMPTY_SYMB = ' '
PLUS_SYMB = '+'


def components(grid: str):
    grid_ = [[ch for ch in row] for row in grid.split('\n')]
    print(f'Grid: ')
    print(f'{grid}')

    components_ = d(int)
    for j, row in enumerate(grid_):
        for i, symb in enumerate(row):
            if symb == EMPTY_SYMB:
                r = bfs(j, i, grid_) // 2
                components_[r] += 1

    return sorted(components_.items(), key=lambda x: -x[0])


def bfs(j: int, i: int, grid: list[list[str]]) -> int:
    res = 0

    if grid[j][i] == EMPTY_SYMB:
        grid[j][i] = 'v'
        counter_of_pluses = 0

        for dj, di in DIRS:
            j_, i_ = j + dj, i + di

            if grid[j_][i_] == PLUS_SYMB:
                counter_of_pluses += 1

            res += bfs(j_, i_, grid)

        # if there are no neighs with '+' sign:
        if not counter_of_pluses:
            res += 1

    return res


grid_1 = '''\
+--+--+--+
|  |     |
+  +  +--+
|  |  |  |
+--+--+--+'''

grid_big = '''\
+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+
|  |  |  |  |                    |           |  |     |     |
+  +--+--+--+  +  +  +--+  +  +  +  +--+--+--+--+--+--+--+--+
|     |  |  |  |  |  |     |  |     |  |        |     |  |  |
+  +--+  +--+  +  +--+--+--+--+--+--+--+  +  +  +--+--+--+--+
|        |  |     |        |  |        |              |     |
+--+  +--+--+--+--+--+--+  +  +  +  +  +  +  +--+--+--+--+  +
|        |        |     |           |  |  |           |  |  |
+--+  +  +  +  +  +  +--+--+--+  +  +--+  +  +--+--+  +  +  +
|     |  |     |     |     |     |  |     |           |     |
+--+--+--+--+--+  +  +--+--+  +--+--+  +--+  +--+  +--+  +--+
|     |  |           |              |        |           |  |
+  +--+  +--+--+--+  +  +  +  +  +--+--+  +  +--+  +  +  +  +
|  |  |  |        |     |     |                 |        |  |
+  +--+  +  +  +  +--+--+  +  +  +--+--+--+  +  +--+--+--+  +
|  |  |           |  |  |           |        |  |  |  |  |  |
+--+  +--+--+--+  +  +  +--+--+--+  +--+--+  +  +--+  +--+  +
|     |     |  |  |     |  |  |     |              |  |  |  |
+--+--+--+--+--+--+  +  +  +  +--+--+  +--+  +--+--+  +--+  +
|        |  |  |     |        |  |     |     |              |
+--+  +  +--+--+--+--+--+--+--+  +  +  +  +  +  +--+--+  +  +
|           |  |        |     |     |     |     |  |     |  |
+  +  +  +  +--+--+  +--+  +  +--+  +--+  +  +--+  +--+--+  +
|     |                       |  |        |        |        |
+--+--+  +--+  +--+--+--+  +  +--+--+  +  +--+--+  +  +  +--+
|     |  |        |              |           |        |     |
+--+--+--+  +--+  +--+--+--+--+  +--+--+--+  +--+--+  +  +  +
|     |  |        |  |     |  |           |  |        |  |  |
+  +--+  +  +  +--+--+  +--+  +  +  +--+  +  +  +  +  +  +  +
|        |     |  |  |  |  |  |                    |        |
+--+  +--+  +--+--+  +--+--+--+--+--+--+--+  +  +--+  +--+  +
|  |        |  |  |        |              |     |        |  |
+  +--+  +--+--+  +  +  +  +  +--+--+  +  +  +--+--+  +  +  +
|              |           |  |           |  |     |        |
+  +  +--+--+--+  +--+  +  +  +--+--+--+--+--+--+--+  +  +  +
|     |     |  |           |     |  |        |     |        |
+--+--+  +--+  +--+--+--+  +  +  +  +--+  +--+--+--+  +--+--+
|     |  |     |                 |  |        |  |     |     |
+--+--+--+--+--+--+--+--+--+--+--+--+  +--+--+  +  +  +  +--+
|                 |  |        |  |  |  |     |              |
+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+'''


print(f'Connectivity components: {components(grid_big)}')



