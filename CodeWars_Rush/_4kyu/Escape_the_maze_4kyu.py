# accepted on codewars.com
from collections import deque as dq

POSITIONS = {'>': 0, 'v': 1, '<': 2, '^': 3}
DIRS = ((0, 1), (1, 0), (0, -1), (-1, 0))
DIRS_IND = {(0, 1): 0, (1, 0): 1, (0, -1): 2, (-1, 0): 3}
SPEC_D = {0: '', 1: 'R', 2: 'B', 3: 'L'}


def escape(maze: list[str]):
    # searching for the sleeping man:
    # print(f'searching for the sleeping man: ')
    for j in range(max_j := len(maze)):
        for i in range(max_i := len(maze[0])):
            if maze[j][i] in POSITIONS.keys():
                symbol = maze[j][i]
                coords = j, i
                break

    # doing a bfs:
    prevs = {}
    to_be_visited = dq()
    to_be_visited.append(coords)
    exit_ = None

    # now bfs:
    while to_be_visited:
        j, i = to_be_visited.popleft()
        print(f'{j, i = }')

        # check for the end point reached:
        if j in {0, max_j - 1} or i in {0, max_i - 1}:
            exit_ = j, i
            break

        for dj, di in DIRS:
            if (j_ := j + dj, i_ := i + di) not in prevs.keys():
                if 0 <= j_ < max_j and 0 <= i_ < max_i:
                    if maze[j_][i_] == ' ':
                        # visiting:
                        prevs[(j_, i_)] = j, i
                        # adding to deque:
                        to_be_visited.append((j_, i_))

    if exit_ is None:
        return []

    # path restoring:
    path = [exit_]
    node_ = exit_
    while node_ != coords and node_ in prevs.keys():
        node_ = prevs[node_]
        path.append(node_)

    # translates path:
    res = []
    _pos = POSITIONS[symbol]
    path = path[::-1]
    for i in range(len(path) - 1):
        j_, i_ = path[i + 1]
        _j, _i = path[i]
        pos_ = DIRS_IND[(j_ - _j), (i_ - _i)]
        action = SPEC_D[(pos_ - _pos + 4) % 4]
        if action:
            res.append(action)
        res.append('F')
        _pos = pos_

    return res


mini_maze = [
    '# #',
    ' > ',
    '# #'
]

maze_ = [
    "#########################################",
    "#<    #       #     #         # #   #   #",
    "##### # ##### # ### # # ##### # # # ### #",
    "# #   #   #   #   #   # #     #   #   # #",
    "# # # ### # ########### # ####### # # # #",
    "#   #   # # #       #   # #   #   # #   #",
    "####### # # # ##### # ### # # # #########",
    "#   #     # #     # #   #   # # #       #",
    "# # ####### ### ### ##### ### # ####### #",
    "# #             #   #     #   #   #   # #",
    "# ############### ### ##### ##### # # # #",                                      # 36 366 98 989 98989 LL
    "#               #     #   #   #   # #   #",
    "##### ####### # ######### # # # ### #####",
    "#   # #   #   # #         # # # #       #",
    "# # # # # # ### # # ####### # # ### ### #",
    "# # #   # # #     #   #     # #     #   #",
    "# # ##### # # ####### # ##### ####### # #",
    "# #     # # # #   # # #     # #       # #",
    "# ##### ### # ### # # ##### # # ### ### #",
    "#     #     #     #   #     #   #   #    ",
    "#########################################"
]

big_maze = [
    "#########################################################################################################################################################################################################",
    "#                   #         #   #       #           #         #           # #       #   #   #         #           #   #     #       #   #   #     #   #   #           #   #   #     #   #            >#",
    "# ############# # ### ##### # # # # ##### # ### ##### # ### ### # ######### # # ##### ### # # # ####### ########### # # # ### # ### # # # ### # ### # # ### # ######### ### # # # # ### ### # ######### #",
    "# #           # #   #   #   #   #   #     #   # #   #     # #   # #   #   # #     # #       # #       #     #     #   # #   #   #   #   #     #   # # # #     #             # #   # #   #   #       #   #",
    "# # ####### # # ### ### # ########### ##### # # # # ### # # ##### ### ### # ##### # ##### ##### ### # ### # # # # # # # ### ##### ########### ### # ### # ##### ####### ##### ##### # ### ######### # ###",
    "# # #     # # #   # #   # #         # #   # # #   # #   # #     #     #   # #     # # #   #   #   # # #   #   # #   # #   # #     #   #       #   # #   #   #   #           #     # #     #   #     # # #",
    "# # # ### # # ##### ##### # ### ### # # ### # ##### # # # ##### ### ### ### # ##### # # ### # ##### # # # ##### ##### ### # ####### # # ####### ### # ####### ### ######### # ### # ####### # # # ### # #",
    "#   # #   # # #     #   # # #   #   #   #   #     # # # #   # #   # #   #   #   #   #     # # #     # # #   #   #   # #   #   #   # # # #   #   #   #     #   #   #   #     # # # # #       # # # #   # #",
    "##### # ### ### ##### # ### ##### # # ### ####### # # ##### # ### # # ##### # # # ##### # # # # ####### ##### # # ### # ##### ### # # # # # # ### ####### # ### ### # # ##### # # # # ####### # # ##### #",
    "#     # #   #   #     #   #   #   # #   #   #     # #   #   # #   #   #       # #     # # # #   #       #   # # #     # #   #   #   # #   # # #   #     #   #   #   #   #       # # # # #     # #       #",
    "# ##### # ### ##### # ### ### # ####### # # # # ##### # ##### # ### ########### ##### # # # ##### ####### # # # ####### ### ### ##### ####### # # # ### ##### ##### # ### ####### # # # # ########### ###",
    "#   # # #   #       #   #     #     #     # # #     # #     #   # #   #   #   #   #   # # #     # #     # # # # #     #   # #   #     #     # # #     # # #   #   # #     #       # #   #   #       # # #",
    "### # # ### ##################### # ### ### # ##### # ##### ##### # ### # # ##### # ### # # ### ### ### # # # # # ### ### # # ### ##### ### # ####### # # # ### # # ### ########### ####### # ##### # # #",
    "#   # #     #     #   #         # # #     # #     # #   # # #   # # #   #       # #   # # # #   #     #   # # # #   # #   #     #     #   # # #     # #   # #   # # #   #   #     #   #     # #     #   #",
    "# ### ##### # ### # # # ####### # # # ##### ##### # # # # # # # # # # ##### ### # # # # # # # ### # # ##### # ##### # # ##### # ##### ##### # # ### ##### # # ##### # # # # ##### ### # ##### # ####### #",
    "#   #     # #   #   #   #   #   # # #   #   #     # # # # #   # #   # #     # # # # #   #   # #   # # #   # #   #   # #       #   #           # # # #     # # #     # # # #   #   #   #       #       # #",
    "### # ### # ############# # # ### # ##### ######### ### # ##### ####### ##### # # ########### ##### ### # # ### # ### ########### ######### # # # # # ##### # # ##### ### # # # ### # ##### ######### # #",
    "#   # #   # #   #       # #     # # #   #     # #   #     #   #   #   #   #   # #     #   #   #   # #   # #   # #   # #       #   #   #     #   # # # #   #   #     # #   # # #   # # #   #     #     # #",
    "# ##### ### # # # ##### # ##### # # # # ##### # # ### # ### ### # # # ### # # # # ### # ### # # # # # ### ##### ### # # ##### # ### # # ####### # # # # # ######### # # ### # ### # ### # ##### # ### # #",
    "        #     #       #   #     # #   #       #   #   #   #     #   #     # #     #   #     #   #   #   #           #   #     #     #   #       #   #   #           #   #   #     #     #       #   #   #",
    "#########################################################################################################################################################################################################"
]

print(f'res: {escape(big_maze)}')
