# accepted on codewars.com
import math


def fibfusc(n, num_digits=None):
    print(f'n: {n}, num_digits: {num_digits}')
    MODULO = 10 ** 100 if num_digits is None else 10 ** num_digits
    bin_n = bin(n)[2:]
    x, y = (1, 0) if bin_n[0] == '0' else (0, 1)
    for i in range(1, len(bin_n)):
        if bin_n[i] == '1':
            x, y = (-y * (2 * x + 3 * y)) % MODULO, ((x + 2 * y) * (x + 4 * y)) % MODULO
        else:
            x, y = ((x + y) * (x - y)) % MODULO, (y * (2 * x + 3 * y)) % MODULO
    return x - MODULO if x > 1 else x, y


num = 96425469595980525884861451154698597624491550969234212903820465156458420895250178630616258702095731265556736092600231147271904909039588318386503962536475593299395710751975450126877434539116329466034450601500682276677189002273107289478096772934799466654956970078290846178469772975698863199052346181098418794349121948041095403140083813301401175649201031674534270735635796867184545830702481754851803879155958319158338662607492983022271643886387502714222816367368842525662503297087598734166414602057660416753878348578688832639453842677525210997768555142335181828472704298796697168424669486837053952296493605
# print(f'bin({num}): {bin(num)}')
print(f'res: {fibfusc(num, 12)}')
# print(f'res rec: {fib_fusc_rec(num)}')
# print(f'{98 % int(math.inf)}')
print(f'{math.log10(2 ** 2000)}')
print(f'length of n: {len(str(96425469595980525884861451154698597624491550969234212903820465156458420895250178630616258702095731265556736092600231147271904909039588318386503962536475593299395710751975450126877434539116329466034450601500682276677189002273107289478096772934799466654956970078290846178469772975698863199052346181098418794349121948041095403140083813301401175649201031674534270735635796867184545830702481754851803879155958319158338662607492983022271643886387502714222816367368842525662503297087598734166414602057660416753878348578688832639453842677525210997768555142335181828472704298796697168424669486837053952296493605))}')

