{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 30,
   "id": "55e0fb3c",
   "metadata": {
    "scrolled": true
   },
   "outputs": [],
   "source": [
    "import sympy\n",
    "from sympy import*\n",
    "from sympy.plotting import plot\n",
    "init_printing()\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 31,
   "id": "aa009e79",
   "metadata": {},
   "outputs": [],
   "source": [
    "# Допущение, что корни действительные. С комплексными работа не идет при наличии модуля.\n",
    "x = Symbol('x', real=True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 32,
   "id": "517e5eeb",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "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\n",
      "text/latex": [
       "$\\displaystyle 5 x^{2} \\left|{x}\\right| + 3 x^{2} - 6 \\left|{x}\\right| + 8$"
      ],
      "text/plain": [
       "   2          2            \n",
       "5⋅x ⋅│x│ + 3⋅x  - 6⋅│x│ + 8"
      ]
     },
     "execution_count": 32,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Функция из ДЗ_11\n",
    "y = Abs(5 * x ** 3) + 3 * x ** 2 - 6 * Abs(x) + 8\n",
    "y"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 33,
   "id": "c044d14c",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "iVBORw0KGgoAAAANSUhEUgAAABIAAAAQCAYAAAAbBi9cAAAAOXRFWHRTb2Z0d2FyZQBNYXRwbG90bGliIHZlcnNpb24zLjUuMSwgaHR0cHM6Ly9tYXRwbG90bGliLm9yZy/YYfK9AAAACXBIWXMAABJ0AAASdAHeZh94AAABrklEQVR4nH3UO2hUURDG8d+GJWK6WEQUrBS0sPaFhXY+EBtxfaAEQUyTTlFMMRm0shBsJIVBNE1ADYhapFELsREEGxtFLEQEkUQxYKJhLe5d3VxvHDjNcOY/3xy+OY12u+1/kZlNrMVsRHzryvdjISLmoLlMcQNHMYTtnXuZ+RGTeIxR7MEc9NRAVmMa1/CsBA1gE0awCw/xICK+dOoa3aNlZi+el11aEfGpZsxp/MBeHIqIqTpFo1iFg1VIGVfxMiL24wbGMnPlElCZGMJIRMzWjDyIjbhQps6hD8erinajF/dqIFtxFkciYhEi4ivu4EAVtB5vImKhAlmDWzgcETOVHq/KuiWgpoodMnMF7uJ8RLyuKsWv8iwBvcOGzOzryl3HdETcr4HAZrytgp5gEcdKNcPox6U6QtmwpXinv6DS/jdxOTNbOIWTEbHcDl3BDKb4d0UuKow2iW0R8b1GSY/C4aexMyJ+1oHm8QENPMrMMYUd3iuMugPDWId9EfGiU/hnRcpFncBT3MYJDGKLwl9txcNOYCwiPncrqCo60/kWMI7xssGA4huZr47aid/OOJnpin3dJwAAAABJRU5ErkJggg==\n",
      "text/latex": [
       "$\\displaystyle \\emptyset$"
      ],
      "text/plain": [
       "∅"
      ]
     },
     "execution_count": 33,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Поиск положительных корней уравнения y = 0:\n",
    "solveset(y, x, Interval(0, +oo))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 34,
   "id": "43c8af48",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "iVBORw0KGgoAAAANSUhEUgAAABIAAAAQCAYAAAAbBi9cAAAAOXRFWHRTb2Z0d2FyZQBNYXRwbG90bGliIHZlcnNpb24zLjUuMSwgaHR0cHM6Ly9tYXRwbG90bGliLm9yZy/YYfK9AAAACXBIWXMAABJ0AAASdAHeZh94AAABrklEQVR4nH3UO2hUURDG8d+GJWK6WEQUrBS0sPaFhXY+EBtxfaAEQUyTTlFMMRm0shBsJIVBNE1ADYhapFELsREEGxtFLEQEkUQxYKJhLe5d3VxvHDjNcOY/3xy+OY12u+1/kZlNrMVsRHzryvdjISLmoLlMcQNHMYTtnXuZ+RGTeIxR7MEc9NRAVmMa1/CsBA1gE0awCw/xICK+dOoa3aNlZi+el11aEfGpZsxp/MBeHIqIqTpFo1iFg1VIGVfxMiL24wbGMnPlElCZGMJIRMzWjDyIjbhQps6hD8erinajF/dqIFtxFkciYhEi4ivu4EAVtB5vImKhAlmDWzgcETOVHq/KuiWgpoodMnMF7uJ8RLyuKsWv8iwBvcOGzOzryl3HdETcr4HAZrytgp5gEcdKNcPox6U6QtmwpXinv6DS/jdxOTNbOIWTEbHcDl3BDKb4d0UuKow2iW0R8b1GSY/C4aexMyJ+1oHm8QENPMrMMYUd3iuMugPDWId9EfGiU/hnRcpFncBT3MYJDGKLwl9txcNOYCwiPncrqCo60/kWMI7xssGA4huZr47aid/OOJnpin3dJwAAAABJRU5ErkJggg==\n",
      "text/latex": [
       "$\\displaystyle \\emptyset$"
      ],
      "text/plain": [
       "∅"
      ]
     },
     "execution_count": 34,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Поиск отрицательных корней уравнения y = 0:\n",
    "solveset(y, x, Interval(-oo, 0))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 36,
   "id": "b6d7037c",
   "metadata": {
    "scrolled": false
   },
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 1152x792 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Plot object containing:\n",
      "[0]: cartesian line: 5*x**2*Abs(x) + 3*x**2 - 6*Abs(x) + 8 for x over (-1.5, 1.5)\n"
     ]
    }
   ],
   "source": [
    "import matplotlib.pyplot as pl\n",
    "pl.rcParams['figure.figsize'] = [16, 11]  # задаём размеры графика\n",
    "\n",
    "# строим график функции y, как можно видеть, значения функции строго положительны на всех участках, \n",
    "# т.к. действительных решений уравнения y = 0 нет:\n",
    "f = plot(y, (x, -1.5, 1.5), show=True, axis_center=(0, 0), ylim=(-3, 22))\n",
    "\n",
    "print(f)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 37,
   "id": "b60dc389",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "5*x**3 + 3*x**2 - 6*x + 8\n",
      "15*x**2 + 6*x - 6\n",
      "{-1/5 + sqrt(11)/5, -sqrt(11)/5 - 1/5}\n"
     ]
    }
   ],
   "source": [
    "# Рассматриваем функцию на интервале от 0 до плюс бесконечности:\n",
    "x = Symbol('x', real=True, positive=True)  # 36\n",
    "\n",
    "l1 = Abs(5 * x ** 3) + 3 * x ** 2 - 6 * Abs(x) + 8\n",
    "print(l1)\n",
    "\n",
    "diff_pos = l1.diff(x)  # дифференцируем y(x), нуль производной даст точку экстремума функции\n",
    "\n",
    "print(diff_pos)\n",
    "\n",
    "root_pos = solveset(diff_pos, x)\n",
    "\n",
    "print(root_pos)  # получаем точку правого экстремума функции или вершину (справа от нуля), второе решение отбрасываем, т.к. мы рассматриваем \n",
    "# строго положительные значения x, а как легко убедиться, оно отрицательно."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 38,
   "id": "e7d33cf4",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "-5*z**3 + 3*z**2 + 6*z + 8\n",
      "-15*z**2 + 6*z + 6\n",
      "{1/5 - sqrt(11)/5, 1/5 + sqrt(11)/5}\n"
     ]
    }
   ],
   "source": [
    "# Рассматриваем функцию на интервале от минус бесконечности до 0:\n",
    "z = Symbol('z', real=True, positive=False)  # 36\n",
    "\n",
    "l2 = Abs(5 * z ** 3) + 3 * z ** 2 - 6 * Abs(z) + 8\n",
    "print(l2)\n",
    "\n",
    "diff_neg = l2.diff(z)  # дифференцируем y(x), нуль производной даст точку экстремума функции\n",
    "\n",
    "print(diff_neg)\n",
    "\n",
    "root_neg = solveset(diff_neg, z)\n",
    "\n",
    "print(root_neg) # получаем точку левого экстремума функции или вершину (слева от нуля), второе решение отбрасываем, т.к. мы рассматриваем \n",
    "# строго отрицательные значения x, а как легко убедиться, оно положительно."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 39,
   "id": "92ed120d",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "8\n"
     ]
    }
   ],
   "source": [
    "print(l1.subs(x, 0))\n",
    "# Так как функция не имеет действительных корней (не пересекает осб абцисс=x), то т.к. значение в нуле равно 8 (положительно),\n",
    "# то функция принимает строго положительные значения на всей действительной оси."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 40,
   "id": "b39c476c",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "0.463324958071080\n"
     ]
    },
    {
     "data": {
      "image/png": "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\n",
      "text/latex": [
       "$\\displaystyle 6.36137018448725$"
      ],
      "text/plain": [
       "6.36137018448725"
      ]
     },
     "execution_count": 40,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "root_pos_f = root_pos.args[0].evalf()\n",
    "\n",
    "print(root_pos_f)  # флоат значение переменной x в точке правого экстремуму функции y\n",
    "\n",
    "l1.subs(x, root_pos_f)  # значение функции в точке правого экстремума"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 41,
   "id": "9a1a026e",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "-0.463324958071080\n"
     ]
    },
    {
     "data": {
      "image/png": "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\n",
      "text/latex": [
       "$\\displaystyle 6.36137018448725$"
      ],
      "text/plain": [
       "6.36137018448725"
      ]
     },
     "execution_count": 41,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "root_neg_f = root_neg.args[0].evalf()\n",
    "\n",
    "print(root_neg_f)  # флоат значение переменной x в точке левого экстремуму функции y\n",
    "\n",
    "l2.subs(z, root_neg_f)  # значение функции в точке левого экстремума"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 42,
   "id": "2e50f304",
   "metadata": {},
   "outputs": [],
   "source": [
    "# Интервалы возрастания/убывания функции:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 43,
   "id": "d085b580",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "iVBORw0KGgoAAAANSUhEUgAAADMAAAAQCAYAAAC7mUeyAAAAOXRFWHRTb2Z0d2FyZQBNYXRwbG90bGliIHZlcnNpb24zLjUuMSwgaHR0cHM6Ly9tYXRwbG90bGliLm9yZy/YYfK9AAAACXBIWXMAABJ0AAASdAHeZh94AAACAUlEQVR4nN3XTYhOURgH8N9oijL2Nj6ifCT5WKjZIJY2o9iNWFBWSiwkPPMslAVlYkFDg2Fryc7UpGYvGx/5SokQGWGhsbh38rre14y5L4v51+2c55zzf8753+ecc5/bMT4+bqags9HIzB3YhLVYg3m4ERG9zciZ+QyLWvh+HRHz28Fp4mMXrpXmvoi4REUMjilEjOElVkzmGB9xtkn7WJs5IDMX4Fw5tquxryrmoELEY0WEhidzjg8R0TeFcXU5MrMDg3iHmzjc2P+LmIgYbiD+7Vz/AwewBZvL8hdUIzMdzM7MXizEZ9zDSER8bycnM1fiFPojYiQzfxMzq4aICczHEE4qzsEdPMrMTe3iZGZnOf4FjrZyWlfMILaWi5uL1biIxbidmWvaxDmBddgTEV9aLabWNouI6sG6j/2ZOYZD6MP2OpzM3KCIxpmIGP3TetqxzZrhQllurMNp2F4PcXwyB+24AJrhTVnOrcnpwrKy/rXFDTuQmQPo/1diusvySU3ON1xuMX694hzdxQOMTltMZq7Cq4h4X2lfhPOleb0Opzzse1vM31eKudo0ncnMHvSU5kSO1J2ZV8r624iY+OruxJHMHMZTfMJSbMMc3MLpyhqmw5kyqpFZi92VtiXlA8/9TCGGsVzxdroVe/2DIuxDGIqIako+Hc6U0TGTfgF+AMPVyHJB3ImmAAAAAElFTkSuQmCC\n",
      "text/latex": [
       "$\\displaystyle 1554$"
      ],
      "text/plain": [
       "1554"
      ]
     },
     "execution_count": 43,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "diff_pos.subs(x, 10)  # значение производной функции в точке левее левого экстремума положительно"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 44,
   "id": "bc578930",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "iVBORw0KGgoAAAANSUhEUgAAAEQAAAAQCAYAAACvDNlTAAAAOXRFWHRTb2Z0d2FyZQBNYXRwbG90bGliIHZlcnNpb24zLjUuMSwgaHR0cHM6Ly9tYXRwbG90bGliLm9yZy/YYfK9AAAACXBIWXMAABJ0AAASdAHeZh94AAACKElEQVR4nO2XO2iUQRSFv0hAIbFPoxEFH4gkWgjbGDGlTQTtIlooWImihYh69hSChYKihRIl6mprqZ2BIKQXG98PRFFUIq4YC1mLmWj2d3fz7+4EU+TAMv/M3DOPs3funemoVCos4C86Uw5meycwAPQDfcBS4Lak4QacV0Bvne4PknpScDL83cDNWN0v6ep0X1JBgBMEIcrAW2BtTt5X4HyN9nJiDraXARejXXe2P7UghwlCPCN4ylhO3qSkYpNzNc2x3QGMAp+BO8DRrE1SQST9EcB2yqFT4SCwDdgay3+Q2kNaxWLbw8By4DvwEBiX9CsVx/Y64AxwQdK47ZqCLGpjEynRA5SA04S4cB94ansgBcd2Z7R9AxxvtJD5IMgoMEjYYBewAbgCrADu2e5LwDkFbAT2SvrRaDFVR2aWdFYLDVNqHkjKBptHwAHbZeAIUAR2tMqxvZngFeckTcy2nmwMeQ5M5dlIxLsmbJvFZcLmtrTKmXFUngAn8wxQJYikwSYmn2t8jGVXG5xuYHX8nqqT+UZsjxCC7aH5kmVqoRDLF21wfgLX6thuIsSVB8BjYAL+c9q1vR54L+lLpr0XuBSrt1rlxAC6r87cRYIgN+bs6m57CBiK1en3RMH29fj9SdLM2+Eu4JjtMeAl8A1YBWwHlgB3gbOZaVrh5EZqD+kH9mTaVsYfwGuqr8tjwBrCP1UgnP1JghuXgJKk7HO8FU5udCw8/6vxG8GC1MIJuI2FAAAAAElFTkSuQmCC\n",
      "text/latex": [
       "$\\displaystyle -1554$"
      ],
      "text/plain": [
       "-1554"
      ]
     },
     "execution_count": 44,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "diff_neg.subs(z, -10)  # значение производной функции в точке правее правого экстремума отрицательно"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 45,
   "id": "d3e9f46a",
   "metadata": {},
   "outputs": [],
   "source": [
    "# Из сказанного выше заключаем, что:\n",
    "# На интервале (-oo, root_neg) функция убывает, так как производная функции в точке -10 (что левее левого экстремума) \n",
    "# меньше нуля.\n",
    "\n",
    "# На интервале (root_pos, oo, ) функция возрастает, так как производная функции в точке 10 (что правее правого экстремума)\n",
    "# больше нуля.\n",
    "\n",
    "# При переходе через точки жэкстремума производная меняет знак, следовательно: на интервале (root_neg, 0) функция возрастает \n",
    "# до точки излома производной в нуле.\n",
    "\n",
    "# Далее на интервале от (0, root_pos) функция убывает."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "1044a5d1",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.9.12"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
