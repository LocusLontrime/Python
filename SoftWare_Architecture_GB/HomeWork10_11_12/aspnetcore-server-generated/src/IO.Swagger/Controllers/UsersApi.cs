/*
 * Сервис роботов-пылесосов
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 0.0.1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Collections.Generic;
using Microsoft.AspNetCore.Mvc;
using Swashbuckle.AspNetCore.Annotations;
using Swashbuckle.AspNetCore.SwaggerGen;
using Newtonsoft.Json;
using System.ComponentModel.DataAnnotations;
using IO.Swagger.Attributes;

using Microsoft.AspNetCore.Authorization;
using IO.Swagger.Models;

namespace IO.Swagger.Controllers
{ 
    /// <summary>
    /// 
    /// </summary>
    [ApiController]
    public class UsersApiController : ControllerBase
    { 
        /// <summary>
        /// Метод регистрации (авторизации) пользователя
        /// </summary>
        /// <param name="body"></param>
        /// <response code="200">Успешный ответ на авторизацию(регистрацию) пользователя</response>
        /// <response code="404">Not Found</response>
        /// <response code="500">Internal Server Error</response>
        /// <response code="0">Все остальное</response>
        [HttpPost]
        [Route("/users")]
        [ValidateModelState]
        [SwaggerOperation("CreateAutUser")]
        [SwaggerResponse(statusCode: 200, type: typeof(User), description: "Успешный ответ на авторизацию(регистрацию) пользователя")]
        [SwaggerResponse(statusCode: 404, type: typeof(Error404), description: "Not Found")]
        [SwaggerResponse(statusCode: 500, type: typeof(Error500), description: "Internal Server Error")]
        [SwaggerResponse(statusCode: 0, type: typeof(Error), description: "Все остальное")]
        public virtual IActionResult CreateAutUser([FromBody]Error body)
        { 
            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(User));

            //TODO: Uncomment the next line to return response 404 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(404, default(Error404));

            //TODO: Uncomment the next line to return response 500 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(500, default(Error500));

            //TODO: Uncomment the next line to return response 0 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(0, default(Error));
            string exampleJson = null;
            exampleJson = "{\n  \"question\" : \"question\",\n  \"id\" : 124556,\n  \"hash\" : 0\n}";
            
                        var example = exampleJson != null
                        ? JsonConvert.DeserializeObject<User>(exampleJson)
                        : default(User);            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// Метод удаления пользователя по ID
        /// </summary>
        /// <param name="id">Уникальный id пользователя</param>
        /// <response code="200">Успешный ответ на удаление пользователя</response>
        /// <response code="404">Not Found</response>
        /// <response code="500">Internal Server Error</response>
        /// <response code="0">Все остальное</response>
        [HttpDelete]
        [Route("/users/{id}")]
        [ValidateModelState]
        [SwaggerOperation("DeleteUserById")]
        [SwaggerResponse(statusCode: 404, type: typeof(Error404), description: "Not Found")]
        [SwaggerResponse(statusCode: 500, type: typeof(Error500), description: "Internal Server Error")]
        [SwaggerResponse(statusCode: 0, type: typeof(Error), description: "Все остальное")]
        public virtual IActionResult DeleteUserById([FromRoute][Required]int? id)
        { 
            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200);

            //TODO: Uncomment the next line to return response 404 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(404, default(Error404));

            //TODO: Uncomment the next line to return response 500 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(500, default(Error500));

            //TODO: Uncomment the next line to return response 0 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(0, default(Error));

            throw new NotImplementedException();
        }

        /// <summary>
        /// Метод получения списка пользователей
        /// </summary>
        /// <response code="200">Успешный ответ со списком пользователей</response>
        /// <response code="404">Not Found</response>
        /// <response code="500">Internal Server Error</response>
        /// <response code="0">Все остальное</response>
        [HttpGet]
        [Route("/users")]
        [ValidateModelState]
        [SwaggerOperation("GetAllUsersById")]
        [SwaggerResponse(statusCode: 200, type: typeof(Users), description: "Успешный ответ со списком пользователей")]
        [SwaggerResponse(statusCode: 404, type: typeof(Error404), description: "Not Found")]
        [SwaggerResponse(statusCode: 500, type: typeof(Error500), description: "Internal Server Error")]
        [SwaggerResponse(statusCode: 0, type: typeof(Error), description: "Все остальное")]
        public virtual IActionResult GetAllUsersById()
        { 
            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(Users));

            //TODO: Uncomment the next line to return response 404 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(404, default(Error404));

            //TODO: Uncomment the next line to return response 500 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(500, default(Error500));

            //TODO: Uncomment the next line to return response 0 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(0, default(Error));
            string exampleJson = null;
            exampleJson = "[ {\n  \"question\" : \"question\",\n  \"id\" : 124556,\n  \"hash\" : 0\n}, {\n  \"question\" : \"question\",\n  \"id\" : 124556,\n  \"hash\" : 0\n} ]";
            
                        var example = exampleJson != null
                        ? JsonConvert.DeserializeObject<Users>(exampleJson)
                        : default(Users);            //TODO: Change the data returned
            return new ObjectResult(example);
        }
    }
}
