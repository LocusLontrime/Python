/*
 * Заказ на ресурсы облака
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 0.0.1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;

namespace IO.Swagger.Models
{ 
    /// <summary>
    /// 
    /// </summary>
    [DataContract]
    public partial class Cloud : IEquatable<Cloud>
    { 
        /// <summary>
        /// Gets or Sets CloudId
        /// </summary>

        [DataMember(Name="cloud_id")]
        public string CloudId { get; set; }

        /// <summary>
        /// Gets or Sets IdClient
        /// </summary>
        [Required]

        [DataMember(Name="id_client")]
        public string IdClient { get; set; }

        /// <summary>
        /// Операционная система сервера
        /// </summary>
        /// <value>Операционная система сервера</value>
        [JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public enum OSEnum
        {
            /// <summary>
            /// Enum WindowsEnum for Windows
            /// </summary>
            [EnumMember(Value = "Windows")]
            WindowsEnum = 0,
            /// <summary>
            /// Enum LinuxEnum for Linux
            /// </summary>
            [EnumMember(Value = "Linux")]
            LinuxEnum = 1        }

        /// <summary>
        /// Операционная система сервера
        /// </summary>
        /// <value>Операционная система сервера</value>
        [Required]

        [DataMember(Name="OS")]
        public OSEnum? OS { get; set; }

        /// <summary>
        /// Gets or Sets RAM
        /// </summary>
        [Required]

        [DataMember(Name="RAM")]
        public string RAM { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class Cloud {\n");
            sb.Append("  CloudId: ").Append(CloudId).Append("\n");
            sb.Append("  IdClient: ").Append(IdClient).Append("\n");
            sb.Append("  OS: ").Append(OS).Append("\n");
            sb.Append("  RAM: ").Append(RAM).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((Cloud)obj);
        }

        /// <summary>
        /// Returns true if Cloud instances are equal
        /// </summary>
        /// <param name="other">Instance of Cloud to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Cloud other)
        {
            if (ReferenceEquals(null, other)) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    CloudId == other.CloudId ||
                    CloudId != null &&
                    CloudId.Equals(other.CloudId)
                ) && 
                (
                    IdClient == other.IdClient ||
                    IdClient != null &&
                    IdClient.Equals(other.IdClient)
                ) && 
                (
                    OS == other.OS ||
                    OS != null &&
                    OS.Equals(other.OS)
                ) && 
                (
                    RAM == other.RAM ||
                    RAM != null &&
                    RAM.Equals(other.RAM)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (CloudId != null)
                    hashCode = hashCode * 59 + CloudId.GetHashCode();
                    if (IdClient != null)
                    hashCode = hashCode * 59 + IdClient.GetHashCode();
                    if (OS != null)
                    hashCode = hashCode * 59 + OS.GetHashCode();
                    if (RAM != null)
                    hashCode = hashCode * 59 + RAM.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(Cloud left, Cloud right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(Cloud left, Cloud right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
